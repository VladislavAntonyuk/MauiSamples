// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Metadata.Internal;
using Microsoft.EntityFrameworkCore.Migrations;

#pragma warning disable 219, 612, 618
#nullable disable

namespace KanbanBoard
{
    public partial class KanbanBoardDbContextModel
    {
        partial void Initialize()
        {
            var card = CardEntityType.Create(this);
            var column = ColumnEntityType.Create(this);

            CardEntityType.CreateForeignKey1(card, column);

            CardEntityType.CreateAnnotations(card);
            ColumnEntityType.CreateAnnotations(column);

            AddAnnotation("ProductVersion", "8.0.2");
            AddRuntimeAnnotation("Relational:RelationalModel", CreateRelationalModel());
        }

        private IRelationalModel CreateRelationalModel()
        {
            var relationalModel = new RelationalModel(this);

            var card = FindEntityType("KanbanBoard.Models.Card")!;

            var defaultTableMappings = new List<TableMappingBase<ColumnMappingBase>>();
            card.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings);
            var kanbanBoardModelsCardTableBase = new TableBase("KanbanBoard.Models.Card", null, relationalModel);
            var columnIdColumnBase = new ColumnBase<ColumnMappingBase>("ColumnId", "INTEGER", kanbanBoardModelsCardTableBase);
            kanbanBoardModelsCardTableBase.Columns.Add("ColumnId", columnIdColumnBase);
            var descriptionColumnBase = new ColumnBase<ColumnMappingBase>("Description", "TEXT", kanbanBoardModelsCardTableBase);
            kanbanBoardModelsCardTableBase.Columns.Add("Description", descriptionColumnBase);
            var idColumnBase = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", kanbanBoardModelsCardTableBase);
            kanbanBoardModelsCardTableBase.Columns.Add("Id", idColumnBase);
            var nameColumnBase = new ColumnBase<ColumnMappingBase>("Name", "TEXT", kanbanBoardModelsCardTableBase);
            kanbanBoardModelsCardTableBase.Columns.Add("Name", nameColumnBase);
            var orderColumnBase = new ColumnBase<ColumnMappingBase>("Order", "INTEGER", kanbanBoardModelsCardTableBase);
            kanbanBoardModelsCardTableBase.Columns.Add("Order", orderColumnBase);
            relationalModel.DefaultTables.Add("KanbanBoard.Models.Card", kanbanBoardModelsCardTableBase);
            var kanbanBoardModelsCardMappingBase = new TableMappingBase<ColumnMappingBase>(card, kanbanBoardModelsCardTableBase, true);
            kanbanBoardModelsCardTableBase.AddTypeMapping(kanbanBoardModelsCardMappingBase, false);
            defaultTableMappings.Add(kanbanBoardModelsCardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase, card.FindProperty("Id")!, kanbanBoardModelsCardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)columnIdColumnBase, card.FindProperty("ColumnId")!, kanbanBoardModelsCardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)descriptionColumnBase, card.FindProperty("Description")!, kanbanBoardModelsCardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase, card.FindProperty("Name")!, kanbanBoardModelsCardMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)orderColumnBase, card.FindProperty("Order")!, kanbanBoardModelsCardMappingBase);

            var tableMappings = new List<TableMapping>();
            card.SetRuntimeAnnotation("Relational:TableMappings", tableMappings);
            var cardsTable = new Table("Cards", null, relationalModel);
            var idColumn = new Column("Id", "INTEGER", cardsTable);
            cardsTable.Columns.Add("Id", idColumn);
            var columnIdColumn = new Column("ColumnId", "INTEGER", cardsTable);
            cardsTable.Columns.Add("ColumnId", columnIdColumn);
            var descriptionColumn = new Column("Description", "TEXT", cardsTable);
            cardsTable.Columns.Add("Description", descriptionColumn);
            var nameColumn = new Column("Name", "TEXT", cardsTable);
            cardsTable.Columns.Add("Name", nameColumn);
            var orderColumn = new Column("Order", "INTEGER", cardsTable);
            cardsTable.Columns.Add("Order", orderColumn);
            var pK_Cards = new UniqueConstraint("PK_Cards", cardsTable, new[] { idColumn });
            cardsTable.PrimaryKey = pK_Cards;
            var pK_CardsUc = RelationalModel.GetKey(this,
                "KanbanBoard.Models.Card",
                new[] { "Id" });
            pK_Cards.MappedKeys.Add(pK_CardsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_CardsUc).Add(pK_Cards);
            cardsTable.UniqueConstraints.Add("PK_Cards", pK_Cards);
            var iX_Cards_ColumnId = new TableIndex(
            "IX_Cards_ColumnId", cardsTable, new[] { columnIdColumn }, false);
            var iX_Cards_ColumnIdIx = RelationalModel.GetIndex(this,
                "KanbanBoard.Models.Card",
                new[] { "ColumnId" });
            iX_Cards_ColumnId.MappedIndexes.Add(iX_Cards_ColumnIdIx);
            RelationalModel.GetOrCreateTableIndexes(iX_Cards_ColumnIdIx).Add(iX_Cards_ColumnId);
            cardsTable.Indexes.Add("IX_Cards_ColumnId", iX_Cards_ColumnId);
            relationalModel.Tables.Add(("Cards", null), cardsTable);
            var cardsTableMapping = new TableMapping(card, cardsTable, true);
            cardsTable.AddTypeMapping(cardsTableMapping, false);
            tableMappings.Add(cardsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn, card.FindProperty("Id")!, cardsTableMapping);
            RelationalModel.CreateColumnMapping(columnIdColumn, card.FindProperty("ColumnId")!, cardsTableMapping);
            RelationalModel.CreateColumnMapping(descriptionColumn, card.FindProperty("Description")!, cardsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn, card.FindProperty("Name")!, cardsTableMapping);
            RelationalModel.CreateColumnMapping(orderColumn, card.FindProperty("Order")!, cardsTableMapping);

            var column = FindEntityType("KanbanBoard.Models.Column")!;

            var defaultTableMappings0 = new List<TableMappingBase<ColumnMappingBase>>();
            column.SetRuntimeAnnotation("Relational:DefaultMappings", defaultTableMappings0);
            var kanbanBoardModelsColumnTableBase = new TableBase("KanbanBoard.Models.Column", null, relationalModel);
            var idColumnBase0 = new ColumnBase<ColumnMappingBase>("Id", "INTEGER", kanbanBoardModelsColumnTableBase);
            kanbanBoardModelsColumnTableBase.Columns.Add("Id", idColumnBase0);
            var nameColumnBase0 = new ColumnBase<ColumnMappingBase>("Name", "TEXT", kanbanBoardModelsColumnTableBase);
            kanbanBoardModelsColumnTableBase.Columns.Add("Name", nameColumnBase0);
            var orderColumnBase0 = new ColumnBase<ColumnMappingBase>("Order", "INTEGER", kanbanBoardModelsColumnTableBase);
            kanbanBoardModelsColumnTableBase.Columns.Add("Order", orderColumnBase0);
            var wipColumnBase = new ColumnBase<ColumnMappingBase>("Wip", "INTEGER", kanbanBoardModelsColumnTableBase);
            kanbanBoardModelsColumnTableBase.Columns.Add("Wip", wipColumnBase);
            relationalModel.DefaultTables.Add("KanbanBoard.Models.Column", kanbanBoardModelsColumnTableBase);
            var kanbanBoardModelsColumnMappingBase = new TableMappingBase<ColumnMappingBase>(column, kanbanBoardModelsColumnTableBase, true);
            kanbanBoardModelsColumnTableBase.AddTypeMapping(kanbanBoardModelsColumnMappingBase, false);
            defaultTableMappings0.Add(kanbanBoardModelsColumnMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)idColumnBase0, column.FindProperty("Id")!, kanbanBoardModelsColumnMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)nameColumnBase0, column.FindProperty("Name")!, kanbanBoardModelsColumnMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)orderColumnBase0, column.FindProperty("Order")!, kanbanBoardModelsColumnMappingBase);
            RelationalModel.CreateColumnMapping((ColumnBase<ColumnMappingBase>)wipColumnBase, column.FindProperty("Wip")!, kanbanBoardModelsColumnMappingBase);

            var tableMappings0 = new List<TableMapping>();
            column.SetRuntimeAnnotation("Relational:TableMappings", tableMappings0);
            var columnsTable = new Table("Columns", null, relationalModel);
            var idColumn0 = new Column("Id", "INTEGER", columnsTable);
            columnsTable.Columns.Add("Id", idColumn0);
            var nameColumn0 = new Column("Name", "TEXT", columnsTable);
            columnsTable.Columns.Add("Name", nameColumn0);
            var orderColumn0 = new Column("Order", "INTEGER", columnsTable);
            columnsTable.Columns.Add("Order", orderColumn0);
            var wipColumn = new Column("Wip", "INTEGER", columnsTable);
            columnsTable.Columns.Add("Wip", wipColumn);
            var pK_Columns = new UniqueConstraint("PK_Columns", columnsTable, new[] { idColumn0 });
            columnsTable.PrimaryKey = pK_Columns;
            var pK_ColumnsUc = RelationalModel.GetKey(this,
                "KanbanBoard.Models.Column",
                new[] { "Id" });
            pK_Columns.MappedKeys.Add(pK_ColumnsUc);
            RelationalModel.GetOrCreateUniqueConstraints(pK_ColumnsUc).Add(pK_Columns);
            columnsTable.UniqueConstraints.Add("PK_Columns", pK_Columns);
            relationalModel.Tables.Add(("Columns", null), columnsTable);
            var columnsTableMapping = new TableMapping(column, columnsTable, true);
            columnsTable.AddTypeMapping(columnsTableMapping, false);
            tableMappings0.Add(columnsTableMapping);
            RelationalModel.CreateColumnMapping(idColumn0, column.FindProperty("Id")!, columnsTableMapping);
            RelationalModel.CreateColumnMapping(nameColumn0, column.FindProperty("Name")!, columnsTableMapping);
            RelationalModel.CreateColumnMapping(orderColumn0, column.FindProperty("Order")!, columnsTableMapping);
            RelationalModel.CreateColumnMapping(wipColumn, column.FindProperty("Wip")!, columnsTableMapping);
            var fK_Cards_Columns_ColumnId = new ForeignKeyConstraint(
                "FK_Cards_Columns_ColumnId", cardsTable, columnsTable,
                new[] { columnIdColumn },
                columnsTable.FindUniqueConstraint("PK_Columns")!, ReferentialAction.Cascade);
            var fK_Cards_Columns_ColumnIdFk = RelationalModel.GetForeignKey(this,
                "KanbanBoard.Models.Card",
                new[] { "ColumnId" },
                "KanbanBoard.Models.Column",
                new[] { "Id" });
            fK_Cards_Columns_ColumnId.MappedForeignKeys.Add(fK_Cards_Columns_ColumnIdFk);
            RelationalModel.GetOrCreateForeignKeyConstraints(fK_Cards_Columns_ColumnIdFk).Add(fK_Cards_Columns_ColumnId);
            cardsTable.ForeignKeyConstraints.Add(fK_Cards_Columns_ColumnId);
            columnsTable.ReferencingForeignKeyConstraints.Add(fK_Cards_Columns_ColumnId);
            return relationalModel.MakeReadOnly();
        }
    }
}
